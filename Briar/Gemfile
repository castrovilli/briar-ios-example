source 'https://rubygems.org'

# the idea here to rely on .calabash-gem and .briar-gem files
# that are not under version control to set the path and branch.
#
# we want bundler to force local branch checks so calabash and briar
# maintainers are allows aware of what branch they are working from.
#
# non-maintainers can simply use the Gemfile as-is.
#
# maintainers should configure bundler to check that they are working against
# the correct branch.
#
# to dev against briar
# 1. create a .briar-gem file with two lines
#    line 1 - path their github fork
#    line 2 - the target branch - defined locally
#    ex.
#    jmoody/briar
#    0.1.3
#
# 2. configure bundler to use a local override
# $ bundle config local.briar ~/path/to/your/local/briar
#
# to dev against calabash-ios
# 1. create a .calabash-gem file with two lines
#    line 1 - path their github fork
#    line 2 - the target branch - defined locally
#    ex.
#    jmoody/calabash-ios
#    fix/0.9.x-return-key
# 2. configure bundler to use a local override
# $ bundle config local.calabash-cucumber ~/path/to/your/local/calabash
#
# http://bundler.io/v1.5/git.html
# https://github.com/benatkin/local-gemfile
# https://groups.google.com/forum/#!topic/ruby-bundler/5zVMtUSNSd0

begin
  eval File.read('bundle_helper.rb')
rescue
  #todo move the .idea directory out features/ and into this directory
  eval File.read(File.expand_path("#{__FILE__}/../bundle_helper.rb"))
end

calabash = Briar::Bundler::Gemfile::GitFile.new('calabash-cucumber')
if calabash.exists?
  #noinspection GemInspection
  gem 'calabash-cucumber', :github => calabash.github, :branch => calabash.branch
else
  #noinspection GemInspection
  gem 'calabash-cucumber', '~> 0.9.166'
end

briar = Briar::Bundler::Gemfile::GitFile.new('briar')
if briar.exists?
  #noinspection GemInspection
  gem 'briar', :github => briar.github, :branch => briar.branch
else
  #noinspection GemInspection
  gem 'briar', '0.1.3'
end

gem 'faker'

# not yet
# gem 'twitter_cldr'
